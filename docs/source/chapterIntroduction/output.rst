Output
------

Seismograms
^^^^^^^^^^^

Seismograms record the displacement, velocity or acceleration as a function
of time. All results from ``versem.py`` are stored originally under
``/results/timesteps/`` as ``.npy`` files. Each file contains a
:math:`Ndim*N\times 1` array which represents the disp/vel/acc of all
dimensions at each gll point at one time (:math:`N` is the number of
points, and :math:`Ndim` is the number of dimensions. The name of a single
such kind of file could be, for example, ``u0.2869035948169.npy``, where
``u`` denotes ``displacement``, and ``0.2869035948169`` denotes
``t=0.2869035948169 s``. Function ``plt_seismo`` reads the desired data
type with the parameter ``dtype`` and gll point coodinates in
``/results/gll_coordinate.npy``. With the interplote function
``scipy.interpolate.griddata``, it will interpolate the value at the
user-specified locations (parameter ``xnew`` and ``ynew`` in the format of
1D ``numpy`` array). To get a smooth seismogram at each station,
interpolation with ``scipy.interpolate.interp1d`` is used in time axis.
Interpolation factor can be set with parameter ``times`` with a default
value of ``10``. All traces are then normalized and sorted by trace index.
User can also specify the start and end time for a zoomed-in inspection with
parameter ``stime`` and ``etime``. In the plotted figure, each dimension is
arranged as one column. This figure is stored defaultly as a ``.pdf`` file
named such as ``u_4.32-4.38s_seismo.pdf``, where ``4.32-4.38s`` denotes the
start and end time. Of course user can specify the figure name with
parameter ``fname``. The resulting seismogram at each point is stored in a
seperate file named like ``u_x30_y30.npy``, where ``u`` denotes
``displacement``, ``x30`` denotes coordinate in 1st dimension and ``y30``
denotes coordinate in 2nd dimension. This file actually contains a
:math:`Nt\times 2` array, where :math:`Nt` is the number of points after
intepolation in time.

As mentioned aboved, the usage of function ``plt_seismo`` can be classified
into two methods. The first way is to run the file directly with
default settings in command line:

``bash$ python scripts/pltseismofunc.py``

This will call the function to plot displacement seismograms at stations on
the surface from 0 to 2500 seperated by 100. The zoomed-in time is from 4.32
to 4.38 s. The resulting figure is saved as ``u_4.32-4.38s_seismo.pdf``
shown in an example [fig:example\_seismo]. Values of all times at each
station is seperately saved under ``/results/seismograms``.

.. figure:: figures/u_4.32-4.38s_seismo.pdf
   :alt: Example Seismograms generated by default usage of pltseismofunc.py

   Example Seismograms in blue lines. Left column is displacement along x
   dimension while the right column is along y dimension. The upper panel
   is the whole time range view and the lower panel is the zoomed-in view. 

The second way is to first import the file into your own scripts like
``import scripts/pltseismofunc.py as seismo``, then call the function inside
your codes with the form like:

``seismo.plt_seismo(xnew, ynew, stime, etime, times, dtype='u', fname=None)``

The detailed description to input parameters should be found in ``Modules``
section.


Wavefield Snapshots
^^^^^^^^^^^^^^^^^^^

Snapshots of the wavefield (displacement, velocity or acceleration) can be
configured as an output as well. Function ``plt_snap`` reads the desired
data type with the parameter ``dtype`` and gll point coodinates from files
mentioned above. The function also lets the user to choose which dimension
to show with the parameter ``stype``. To make a smooth wavefield snapshot,
spatial interpolation using ``scipy.interpolate.griddata`` is used within
the rectangle region defined by the gll locations. The final number points
along the 1st dimension after interpolation should be specified by user
with ``xnpt``. Then the function would make an animation integrating
snapshots at all time steps. As a default, the animation would be saved as
a ``.mp4`` file named such as ``u_xdim_xnpt500.mp4``, where ``xdim``
denotes the prefered dimension type to show and ``xnpt500`` means the final
number of points along the 1st dimension after interpolation. User can
specify the file name of the output animation with the parameter ``fname``
as well.

Similar to seismograms, the usage of function ``plt_snap`` can be
classified into two methods. The first way is to run the file directly with
default settings in command line:

``bash$ python scripts/pltsnapfunc.py``

This will call the function to plot displacement wavefield snapshot animation
of the 1st dimension with 500 points along the 1st dimension after
interpolation. The resulting figure is saved as ``u_xdim_xnpt500.mp4``.

The second way is to first import the file into your own scripts like
``import scripts/pltsnapfunc.py as snap``, then call the function inside your
codes with the form like:

``snap.plt_snap(xnpt, dtype='u', stype='xdim', fname=None)``

The detailed description to input parameters should be found in ``Modules``
section.

